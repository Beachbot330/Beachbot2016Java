// RobotBuilder Version: 2.0BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330.Beachbot2016Java;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController chassischassisLeftDrive1;
    public static SpeedController chassischassisLeftDrive2;
    public static RobotDrive chassischassisLeftDrive;
    public static SpeedController chassischassisRightDrive1;
    public static SpeedController chassischassisRightDrive2;
    public static RobotDrive chassischassisRightDrive;
    public static DoubleSolenoid chassisShifter;
    public static SpeedController armarm;
    public static AnalogPotentiometer armarmPot;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        chassischassisLeftDrive1 = new Talon(3);
        LiveWindow.addActuator("Chassis", "chassisLeftDrive1", (Talon) chassischassisLeftDrive1);
        
        chassischassisLeftDrive2 = new Talon(4);
        LiveWindow.addActuator("Chassis", "chassisLeftDrive2", (Talon) chassischassisLeftDrive2);
        
        chassischassisLeftDrive = new RobotDrive(chassischassisLeftDrive1, chassischassisLeftDrive2);
        
        chassischassisLeftDrive.setSafetyEnabled(true);
        chassischassisLeftDrive.setExpiration(0.1);
        chassischassisLeftDrive.setSensitivity(0.5);
        chassischassisLeftDrive.setMaxOutput(1.0);

        chassischassisRightDrive1 = new Talon(2);
        LiveWindow.addActuator("Chassis", "chassisRightDrive1", (Talon) chassischassisRightDrive1);
        
        chassischassisRightDrive2 = new Talon(1);
        LiveWindow.addActuator("Chassis", "chassisRightDrive2", (Talon) chassischassisRightDrive2);
        
        chassischassisRightDrive = new RobotDrive(chassischassisRightDrive1, chassischassisRightDrive2);
        
        chassischassisRightDrive.setSafetyEnabled(true);
        chassischassisRightDrive.setExpiration(0.1);
        chassischassisRightDrive.setSensitivity(0.5);
        chassischassisRightDrive.setMaxOutput(1.0);

        chassisShifter = new DoubleSolenoid(0, 0, 1);
        LiveWindow.addActuator("Chassis", "Shifter", chassisShifter);
        
        armarm = new Talon(0);
        LiveWindow.addActuator("Arm", "arm", (Talon) armarm);
        
        armarmPot = new AnalogPotentiometer(0, 1.0, 0.0);
        LiveWindow.addSensor("Arm", "armPot", armarmPot);
        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
