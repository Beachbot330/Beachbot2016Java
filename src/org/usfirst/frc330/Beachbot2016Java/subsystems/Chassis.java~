// RobotBuilder Version: 2.0BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330.Beachbot2016Java.subsystems;

import org.usfirst.frc330.Beachbot2016Java.RobotMap;
import org.usfirst.frc330.Beachbot2016Java.commands.*;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Chassis extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController chassisLeftDrive1 = RobotMap.chassischassisLeftDrive1;
    private final SpeedController chassisLeftDrive2 = RobotMap.chassischassisLeftDrive2;
    private final RobotDrive chassisLeftDrive = RobotMap.chassischassisLeftDrive;
    private final SpeedController chassisRightDrive1 = RobotMap.chassischassisRightDrive1;
    private final SpeedController chassisRightDrive2 = RobotMap.chassischassisRightDrive2;
    private final RobotDrive chassisRightDrive = RobotMap.chassischassisRightDrive;
    private final DoubleSolenoid shifter = RobotMap.chassisShifter;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    public void shiftHigh()
    {
    	shift.set(DoubleSolenoid.Value.kForward);
    }
    
    public void shiftLow()
    {
    	shift.set(DoubleSolenoid.Value.kReverse);
    }
    
    public boolean isHighGear() {
    	return (shift.get() == DoubleSolenoid.Value.kForward);
    }
    
    public double getPressure() {
    	return 37.5*(pressureSensor.getAverageVoltage()- 0.5);
    }
    
    double left, right;
    public void tankDrive(Joystick leftJoystick, Joystick rightJoystick)
    {
       left = -leftJoystick.getY();
       right = -rightJoystick.getY();
    }
   
    public void tankDrive(double left, double right)
    {
        this.left = left;
        this.right = right;
    }
    
    private void drive(double left, double right) {
        chassisLeftDrive.set(left);
        chassisRightDrive.set(right);
    }
    
    public void pidDrive()
    {
        double left, right;
        if (DriverStation.getInstance().isDisabled())
        {
            stopDrive();
        }
        else
        {
            left = this.left+leftDriveOutput.getOutput() + gyroOutput.getOutput();
            right = this.right+rightDriveOutput.getOutput() - gyroOutput.getOutput();
            drive(left, right);
            this.left = 0;
            this.right = 0;
        }
    }
    
    public void pidDriveAuto()
    {
        double left, right, gyroValue;
        if (DriverStation.getInstance().isDisabled())
        {
            stopDrive();
        }
        else
        {
        	//gyroValue = Math.signum(gyroOutput.getOutput()) * Math.min(Math.abs(gyroOutput.getOutput()) , 0.5);
        	gyroValue = Math.signum(gyroOutput.getOutput()) * Math.min(Math.abs(gyroOutput.getOutput()) , 1.0);
        	left = this.left+leftDriveOutput.getOutput() + gyroValue;
            right = this.right+rightDriveOutput.getOutput() - gyroValue;
            drive(left, right);
            this.left = 0;
            this.right = 0;
        }
    }
    
    public void stopDrive()
    {
        if (gyroPID.isEnabled())
            gyroPID.reset();
        if (leftDrivePID.isEnabled())
            leftDrivePID.reset();
        if (rightDrivePID.isEnabled())
            rightDrivePID.reset();        
        tankDrive(0, 0);  
    }
}

