// RobotBuilder Version: 2.0BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330.commands;

import edu.wpi.first.wpilibj.command.BBCommand;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc330.Robot;
import org.usfirst.frc330.constants.TurretConst;
import org.usfirst.frc330.constants.TurretConstPract;
import org.usfirst.frc330.util.Logger.Severity;

/**
 *
 */
public class AimSmart extends BBCommand {

	double setpoint;
    double prevSetpoint = 0;
    double tolerance;
    double timeout;
    int toleranceCount;
    static int aimNumber = 0;
    Goal aimGoal;
    AimState state;
    
    public enum Goal {left, center, right};
    private enum AimState {WaitingForTarget, Aiming, Aimed, Search2, Move2, Wait2, Aiming2, Search3, Move3, Wait3, Aiming3, none};

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AimSmart() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    	this(TurretConst.tolerance, TurretConst.timeout, Goal.center);
    }
    
    public AimSmart(double tolerance, double timeout) {
    	this(tolerance, timeout, Goal.center);
    }
    
    public AimSmart(double tolerance, double timeout, Goal goal) {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.turret);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    	this.tolerance = tolerance;
    	this.timeout = timeout;
    	toleranceCount = 0;
    	aimGoal = goal;
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	aimNumber++;
    	Robot.pickup.openLid();
    	Robot.turret.setTurretAbsoluteTolerance(tolerance);
    	toleranceCount = 0;
    	counter = 0;
    	if (timeout >= 0.0) {
    		setTimeout(timeout);
    	} else {
    		setTimeout(9999999);
    	}
    	state = AimState.WaitingForTarget;
    	prevState = AimState.none;
        SmartDashboard.putString("savePictureName", "Aim_" + aimNumber + "_begin");
        SmartDashboard.putBoolean("savePicture", true);
        
        //Slow PID for aiming
        if (!Robot.frills.isPracticeRobot()){
        	Robot.turret.setPIDConstants(TurretConst.aimProportional, TurretConst.aimIntegral, TurretConst.aimDerivative);
            Robot.turret.setVoltageRampRate(TurretConst.aimVoltageRampRate);
        	Robot.turret.configMaxOutputVoltage(TurretConst.aimMaxOutputVoltage);
        }
        else{
        	Robot.turret.setPIDConstants(TurretConstPract.aimProportional, TurretConstPract.aimIntegral, TurretConstPract.aimDerivative);
            Robot.turret.setVoltageRampRate(TurretConstPract.aimVoltageRampRate);
        	Robot.turret.configMaxOutputVoltage(TurretConstPract.aimMaxOutputVoltage);
        }
    }

    int counter =0;
    double searchAngle =0;
    double stopAngle = 0;
    AimState prevState = AimState.none;
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	switch (state) {
		case WaitingForTarget:
			if (SmartDashboard.getBoolean("targetDetected", false))
				state = AimState.Aiming;
			if (counter > 50)
				state = AimState.Search2;
			counter++;
			toleranceCount =0;
			break;

		case Aiming:
	    	setpoint = SmartDashboard.getNumber("targetAngle", prevSetpoint);
	    	Robot.turret.setTurretAngle(Robot.turret.getTurretAngle()+setpoint);
	    	if (Robot.turret.onTurretTarget() && isTargetRightDistance())
	    		toleranceCount++;
	    	else
	    		toleranceCount = 0;
	    	if (toleranceCount >= 25)
	    		state = AimState.Aimed;
	    	prevSetpoint = setpoint;
			break;
		case Aimed:
			break;
		case Aiming2:
		case Aiming3:
	    	setpoint = SmartDashboard.getNumber("targetAngle", prevSetpoint);
	    	Robot.turret.setTurretAngle(Robot.turret.getTurretAngle()+setpoint);
	    	if (Robot.turret.onTurretTarget() && isTargetRightDistance())
	    		toleranceCount++;
	    	else
	    		toleranceCount = 0;
	    	if (toleranceCount >= 25)
	    		state = AimState.Aimed;
			break;
		case Search2:
			searchAngle = -30;
			stopAngle = Robot.turret.getTurretAngle()+searchAngle;
			Robot.turret.setTurret(searchAngle/Math.abs(searchAngle)/4);
			state = AimState.Move2;
			break;
		case Search3:
			searchAngle *= -2.0;
			stopAngle = Robot.turret.getTurretAngle()+searchAngle;
			Robot.turret.setTurret(searchAngle/Math.abs(searchAngle)/4);
			state = AimState.Move3;
			break;
		case Move2:
			if (Robot.turret.getTurretAngle() <= stopAngle) {
				state = AimState.Wait2;
			}
			if (isTargetRightDistance())
				state = AimState.Aiming2;
			break;
		case Move3:
			if (Robot.turret.getTurretAngle() >= stopAngle) {
				state = AimState.Wait3;
			}
			if (isTargetRightDistance())
				state = AimState.Aiming3;
			break;
		case Wait2:
			Robot.turret.setTurret(0);
			if (isTargetRightDistance())
				state = AimState.Aiming2;
			if (counter > 50)
				state = AimState.Search3;
			counter++;
			break;
		case Wait3:
			Robot.turret.setTurret(0);
			if (isTargetRightDistance())
				state = AimState.Aiming3;
			if (counter > 50)
				state = AimState.Aiming3;
			counter++;
			break;
		default:
			Robot.logger.println("Got to default case in AimSmart", true, Severity.ERROR);
			break;
    	}
    	if (prevState != state) {
    		Robot.logger.println("Aim Smart Old State: " + prevState + " New State: " + state, true, Severity.INFO);
    		prevState = state;
    		counter = 0;
    		toleranceCount = 0;
    	}

    }


    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	if (isTimedOut())
    	{
    		Robot.logger.println("Aim Timed Out. Aim setpoint: " + this.setpoint + "   Position at timeout: " + Robot.turret.getTurretAngle() + " Aim State: " + state,Severity.WARNING);
    	}
    	return ( (state == AimState.Aimed && isTargetRightDistance()) || isTimedOut() );
    }
    
    private boolean isTargetRightDistance() {
    	return (SmartDashboard.getBoolean("targetDetected", false) && SmartDashboard.getNumber("targetDistance", 0.0) >= 3.0 && SmartDashboard.getNumber("targetDistance", 0.0) <= 5.5);
    }

    // Called once after isFinished returns true
    protected void end() {
    	SmartDashboard.putString("savePictureName", "Aim_ " + aimNumber + "_end");
    	SmartDashboard.putBoolean("savePicture", true); 
    	
    	//Return to fast PID
    	Robot.turret.setPIDConstants(TurretConst.proportional, TurretConst.integral, TurretConst.derivative);
        Robot.turret.setVoltageRampRate(TurretConst.VoltageRampRate);
    	Robot.turret.configMaxOutputVoltage(TurretConst.MaxOutputVoltage);
    	
    	Robot.turret.setTurret(0.0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	SmartDashboard.putString("savePictureName", "Aim_ " + aimNumber + "_interrupted");
    	SmartDashboard.putBoolean("savePicture", true); 
    	
    	//Return to fast PID
    	Robot.turret.setPIDConstants(TurretConst.proportional, TurretConst.integral, TurretConst.derivative);
        Robot.turret.setVoltageRampRate(TurretConst.VoltageRampRate);
    	Robot.turret.configMaxOutputVoltage(TurretConst.MaxOutputVoltage);
    	
    	Robot.turret.setTurret(0.0);
    }
}
