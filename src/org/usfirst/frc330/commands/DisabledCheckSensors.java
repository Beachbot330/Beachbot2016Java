// RobotBuilder Version: 2.0BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330.commands;

import edu.wpi.first.wpilibj.RobotState;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.BBCommand;
import org.usfirst.frc330.Robot;
import org.usfirst.frc330.util.Logger;
import org.usfirst.frc330.util.Logger.Severity;

/**
 *
 */
public class DisabledCheckSensors extends BBCommand {

	Timer timeyWhimey = new Timer();
	double time;
	boolean sensorFault;
	boolean buzzerOn = false;
	boolean resting = false;
	
	public DisabledCheckSensors() {
        this(0.1);
    }
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DisabledCheckSensors(double time) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        this.setRunWhenDisabled(true);
        this.time = time;  	
        requires(Robot.frills);
    }
    
    // Called just before this Command runs the first time
    protected void initialize() {
    	
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	sensorFault = Robot.turret.getSensorFault();
    	if(sensorFault){
    		if (!buzzerOn && !resting) {
    			Logger.getInstance().println("Talon Sensor Fault!", true, Severity.ERROR);
    			Robot.buzzer.enable(time);
            	buzzerOn = true;
    			timeyWhimey.reset();
    			timeyWhimey.start();
    		}
    	}
    	if (timeyWhimey.hasPeriodPassed(time)){
    		if (buzzerOn){
        		timeyWhimey.stop();
        		buzzerOn = false;
        		resting = true;
        		timeyWhimey.reset();
    			timeyWhimey.start();
    		}
    		else if (resting){
	    		resting = false;
	    		timeyWhimey.stop();
	    	}
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	return !RobotState.isDisabled();
    }

    // Called once after isFinished returns true
    protected void end() {
    	timeyWhimey.stop();  
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
