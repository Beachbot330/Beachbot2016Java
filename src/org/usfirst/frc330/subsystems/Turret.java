// RobotBuilder Version: 2.0BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330.subsystems;

import org.usfirst.frc330.Robot;
import org.usfirst.frc330.RobotMap;
import org.usfirst.frc330.constants.ArmConst;
import org.usfirst.frc330.constants.TurretConst;
import org.usfirst.frc330.util.CSVLoggable;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Turret extends Subsystem {

	double tolerance = 0;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon turret = RobotMap.turretturret;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}

	/////////////////////////////////////////////////////////////
	// MAIN CLASS
	/////////////////////////////////////////////////////////////
	public Turret()
	{
		super();

		// Turret PIDController object
		setPIDConstants(TurretConst.proportional, TurretConst.integral, TurretConst.derivative);
		setTurretAbsoluteTolerance(ArmConst.tolerance);

		/////////////////////////////////////////////////////////////////
		// LOG IT!
		// TODO: Add additional logging as needed

		CSVLoggable temp = new CSVLoggable(true) {
			public double get() { return getTurretAngle(); }
		};
		Robot.csvLogger.add("TurretAngle", temp);

	}
	/////////////////////////////////////////////////////////////
	// SET methods
	/////////////////////////////////////////////////////////////

	// Helper function: SetTurret
	// Function: Set turret angle based on input of type double
	// Parameters:
	// 		double output - variable to set turret angle 
	// Return value:
	//		void
	public void setTurret(double output){
		double limitCW,
			   limitCCW;
		
		//Reduced CW limit if arm is low
		if (Robot.arm.getArmAngle() < ArmConst.armSafeLimit)
		{ 
			limitCW = TurretConst.turretSafeLimitCW;
			limitCCW = TurretConst.turretSafeLimitCCW;
		}
		else
		{
			limitCW = TurretConst.limitAngleCW;
			limitCCW = TurretConst.limitAngleCCW;
		}
		
		
		//Don't rotate too far CW
		if (getTurretAngle() > limitCW && output > 0)
		{
			turret.set(0.0);
		}
		
		//Dont't rotate too far CCW
		else if (getTurretAngle() < limitCCW && output < 0)
		{
			turret.set(0.0);
		}
		
		//Check current limits	
/*		else if (output > 0 && Robot.powerDP.getArmLeftCurrent() < ArmPos.currentLowerLimit)
			arm.set(0);
		else if (output < 0 && Robot.powerDP.getArmLeftCurrent() > ArmPos.currentUpperLimit)
			arm.set(0);
		else if (output > 0 && Robot.powerDP.getArmRightCurrent() < ArmPos.currentLowerLimit)
			arm.set(0);
		else if (output < 0 && Robot.powerDP.getArmRightCurrent() > ArmPos.currentUpperLimit)
			arm.set(0);*/
		
		//Else Go!
		else
		{
			turret.set(output);
		}
			
	}

	// Helper function: setPIDConstants
	// Function: Set PID constants
	// Parameters:
	// 		double P - Proportional value
	//		double I - Integral value
	// 		double D - Derivative value
	//     
	// Return value:
	//		void
	public void setPIDConstants(double P, double I, double D)
	{
		turret.setPID(P, I, D);
	}

	public void setTurretAbsoluteTolerance(double absvalue) {
    	tolerance = absvalue;
	}
	
	public void setTurretAngle(double position)
	{
		turret.setSetpoint(position);
	}

	/////////////////////////////////////////////////////////////
	// GET methods
	/////////////////////////////////////////////////////////////	
	public double getTurretAngle()
	{
		return turret.getPosition();
	}

	public double getTurretOutput() {
		return turret.get();
	}

	/////////////////////////////////////////////////////////////
	// PID Stuff
	/////////////////////////////////////////////////////////////
	public synchronized double getTurretSetpoint() {
		return turret.getSetpoint();
	}

	// Method to check if Turret is on target
	public synchronized boolean onTurretTarget() {
		double error = convertTicksToDegrees(turret.getClosedLoopError());
        return (Math.abs(error) < tolerance);
	}

	// Method returns if Turret is enabled
	public synchronized boolean isTurretEnabled() {
		return turret.isEnabled();
	}

	// Method to Enable Turret
	public synchronized void enableTurret() {
		turret.enable();
	}

	// Method to Disable Turret
	public synchronized void disableTurret() {
		turret.disable();
	}

	// Method to Disable Turret - called by disableTurret
	public void stopTurret()
	{
		if (turret.isEnabled())
		{
			turret.reset();
		}
		
		turret.set(0);
		
	}

	public double pidGet() {
		return getTurretAngle();
	}

	//////////////////////////
	// Other Methods
	//////////////////////////
	double tempSetpoint;
	public void manualTurret() {
		double turretCommand = Robot.oi.armJoystick.getZ();
		if (Math.abs(turretCommand) > 0.03)
		{
			if (turret.isEnabled())
				turret.disable();
		}
		else if (!turret.isEnabled())
		{
			tempSetpoint = this.getTurretAngle();
			if(tempSetpoint > TurretConst.limitAngleCW)
				tempSetpoint = TurretConst.limitAngleCW;
			else if(tempSetpoint < TurretConst.limitAngleCCW)
				tempSetpoint = TurretConst.limitAngleCCW;
			turret.setSetpoint(tempSetpoint);
			turret.enable();
		} 
	}

	public synchronized boolean isEnable() {
		return turret.isEnabled();
	}
	
	// Helper function: convertDegreesToTicks
	// Function: Convert degrees to ticks
	// Parameters:
	// 		double degrees - Degrees to convert to ticks
	//     
	// Return value:
	//		int - Tick values
	private int convertDegreesToTicks(double degrees) {
    	return (int)(degrees * 4096.0 / 360.0);
    }
    
	// Helper function: convertTicksToDegrees
	// Function: Convert ticks to degrees
	// Parameters:
	// 		double ticks - Ticks to convert to degrees
	//     
	// Return value:
	//		int - Degree values
    private double convertTicksToDegrees(int ticks) {
    	return (ticks * 360.0 / 4096.0);
    }
    
    // Helper function: convertDegreesToRotations
 	// Function: Convert degrees to rotations
 	// Parameters:
 	// 		double degrees - Degrees to convert to rotations
 	//     
 	// Return value:
 	//		double - Rotation value
    private double convertDegreesToRotations(double degrees) {
    	return (degrees / 360.0);
    }
    
    // Helper function: convertRotationsToDegrees
  	// Function: Convert rotationss to degrees
  	// Parameters:
  	// 		double rotations - Rotations to conver to degrees
  	//     
  	// Return value:
  	//		double - Degree values
    private double convertRotationsToDegrees(double rotations) {
    	return (rotations * 360.0);
    }
	
}

