// RobotBuilder Version: 2.0BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330.subsystems;

import org.usfirst.frc330.Robot;
import org.usfirst.frc330.RobotMap;
import org.usfirst.frc330.commands.*;

import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Solenoid;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Climber extends Subsystem
{

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final DoubleSolenoid powerTakeOff = RobotMap.climberPowerTakeOff;
    private final Solenoid pivotHigh = RobotMap.climberPivotHigh;
    private final Solenoid pivotLow = RobotMap.climberPivotLow;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand()
    {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void lowerClimberDeploy()
    {
    	if (Robot.arm.isSafeToDeployLowerClimber() && Robot.turret.isCentered())
    		pivotLow.set(true);
    }
    
    public void lockLowerClimber() {
    	pivotLow.set(false);
    }
    
    public boolean isLowerClimberDeployed()
    {
    	return pivotLow.get();
    }

    public void upperClimberDeploy()
    {
    	if (Robot.arm.isSafeToDeployUpperClimber() && Robot.turret.isCentered() && isLowerClimberDeployed())
    		pivotHigh.set(true);
    }
    
    public void lockUpperClimber() {
    	pivotHigh.set(false);
    }

    public void engagePTO(){
       	powerTakeOff.set(DoubleSolenoid.Value.kForward);
    }

    public void disengagePTO(){
    	powerTakeOff.set(DoubleSolenoid.Value.kReverse);
    }

    public void stopClimber(){
    	disengagePTO();
    }
}

